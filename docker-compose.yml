version: '3.6'

networks:
  default:
    driver: bridge
    ipam:
      driver: default
  nextcloud:
    driver: bridge
    internal: true
    ipam:
      driver: default

services:
  portainer-ce:
    container_name: portainer-ce
    image: portainer/portainer-ce
    restart: unless-stopped
    ports:
    - "8000:8000"
    - "9000:9000"
    # HTTPS
    - "9443:9443"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./volumes/portainer-ce/data:/data

  portainer_agent:
    image: portainer/agent
    container_name: portainer-agent
    ports:
    - "9001:9001"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: unless-stopped
  
  gpsd:
    container_name: gpsd
    build:
      context: ./services/gpsd/.
    environment:
      USB_DEVICE_PATH: /dev/${GPSD_UDEV_KEY}
    devices:
    - /dev/${GPSD_UDEV_KEY}:/dev/${GPSD_UDEV_KEY}
    ports:
    - "2947:2947"
    restart: unless-stopped
  
  nomadpi-core-api:
    container_name: nomadpi-core-api
    build:
      context: ./services/nomadpi-core-api/.
    restart: unless-stopped
    user: "0"
    network_mode: "host"
    environment:
      TZ: ${TZ:-Etc/UTC}
      NODE_RED_ENABLE_PROJECTS: "true"
      GPIOD_HOST: 127.0.0.1
      SCRIPTS_PATH: /scripts
      HTTP_API_BASE_PATH: api
      DB_HOST: 127.0.0.1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      GPSD_UDEV_KEY: ${GPSD_UDEV_KEY}
      ZIGBEE_UDEV_KEY: ${ZIGBEE_UDEV_KEY}
      HUB_MQTT_TOPIC: ${HUB_MQTT_TOPIC}
      SERVICES_API_ROOT_URL: "http://127.0.0.1:3002"
    ports:
    - "1880:1880"
    devices:
    - /dev/i2c-1:/dev/i2c-1
    volumes:
    - ./volumes/nomadpi-core-api/data:/data
    - ./volumes/nomadpi-core-api/ssh:/root/.ssh
    - ./volumes/secrets:/secrets
    - ./data/scripts:/scripts
    - /var/run/docker.sock:/var/run/docker.sock
    - /dev/i2c-1:/dev/i2c-1
    - /lib/udev/rules.d:/lib/udev/rules.d
  
  nomadpi-automation-api:
    container_name: nomadpi-automation-api
    image: nodered/node-red
    restart: unless-stopped
    user: "0"
    network_mode: "host"
    environment:
      TZ: ${TZ:-Etc/UTC}
      NODE_RED_ENABLE_PROJECTS: "true"
      PORT: 1881
      NOMADPI_APP_API_URL: http://127.0.0.1:1880/api/v1
    ports:
    - "1881:1881"
    volumes:
    - ./volumes/nomadpi-automation-api/data:/data
    - ./volumes/nomadpi-core-api/ssh:/root/.ssh

  mosquitto:
    container_name: mosquitto
    build:
      context: ./services/mosquitto/.
      args:
      - MOSQUITTO_BASE=eclipse-mosquitto:latest
    restart: unless-stopped
    environment:
    - TZ=${TZ:-Etc/UTC}
    ports:
    - "1883:1883"
    volumes:
    - ./volumes/mosquitto/config:/mosquitto/config
    - ./volumes/mosquitto/data:/mosquitto/data
    - ./volumes/mosquitto/log:/mosquitto/log
    - ./volumes/mosquitto/pwfile:/mosquitto/pwfilie
  
  mariadb:
    build: ./services/mariadb/.
    container_name: mariadb
    environment:
      TZ: ${TZ:-Etc/UTC}
      PUID: 1000
      PGID: 1000
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
    - ./volumes/mariadb/config:/config
    - ./volumes/mariadb/db_backup:/backup
    ports:
    - "3306:3306"
    restart: unless-stopped

  nomadpi-react:
    container_name: nomadpi-react
    build:
      context: ./services/nomadpi-react
    command: sh -c "cd /usr/src/app && npm install && npm start"
    volumes:
    - ./volumes/nomadpi-react:/usr/src/app
    ports:
    - "3000:3000"
    restart: unless-stopped
  
  nomadpi-app-api:
    container_name: nomadpi-app-api
    image: node:21-alpine
    network_mode: "host"
    command: sh -c "cd /usr/src/app && npm install && node server.js"
    volumes:
    - ./volumes/nomadpi-app-api/src:/usr/src/app
    ports:
    - "3001:3001"
    depends_on:
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      RPI_HOSTNAME: ${RPI_HOSTNAME}
      DB_HOST: "127.0.0.1"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      CORE_API_ROOT_URL: "http://127.0.0.1:1880"
      AUTOMATION_API_ROOT_URL: "http://127.0.0.1:1881"
      BUTTERFLY_API_ROOT_URL: "http://127.0.0.1:3005"
      SERVICES_API_ROOT_URL: "http://127.0.0.1:3002"
      FRIGATE_API_ROOT_URL: "http://127.0.0.1:5000"
      GPSD_UDEV_KEY: ${GPSD_UDEV_KEY}
      ZIGBEE_UDEV_KEY: ${ZIGBEE_UDEV_KEY}
  
  nomadpi-services-api:
    container_name: nomadpi-services-api
    image: node:21-alpine
    command: sh -c "cd /usr/src/app && npm install && node server.js"
    volumes:
    - ./volumes/nomadpi-services-api:/usr/src/app
    ports:
    - "3002:3000"
    depends_on:
      - nomadpi-app-api
    restart: unless-stopped
    network_mode: host
    environment:
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DB_HOST: "127.0.0.1"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PORT: 3002
      CORE_API_ROOT_URL: "http://127.0.0.1:1880"

  nomadpi-mqtt-hub:
    container_name: nomadpi-mqtt-hub
    image: node:21-alpine
    command: sh -c "cd /usr/src/app && npm install && node server.js"
    volumes:
    - ./volumes/nomadpi-mqtt-hub/src:/usr/src/app
    depends_on:
    - nomadpi-app-api
    - mosquitto
    restart: unless-stopped
    environment:
      MQTT_BROKER_URL: mqtt://mosquitto:1883
      DB_HOST: mariadb
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_NAME}
      HUB_MQTT_TOPIC: ${HUB_MQTT_TOPIC}
  
  nomadpi-gpsd-to-mqtt:
    container_name: nomadpi-gpsd-to-mqtt
    image: node:21-alpine
    command: sh -c "cd /usr/src/app && npm install && node server.js"
    volumes:
    - ./volumes/nomadpi-gpsd-to-mqtt/src:/usr/src/app
    depends_on:
    - mosquitto
    - gpsd
    restart: unless-stopped
    environment:
      MQTT_BROKER: mqtt://mosquitto:1883
      MQTT_TOPIC: ${GPSD_MQTT_TOPIC}
      GPSD_HOST: gpsd
 
  nomadpi-butterfly-ai:
    container_name: nomadpi-butterfly-ai
    image: node:21-alpine
    command: sh -c "cd /usr/src/app && npm install && node server.js"
    network_mode: host
    volumes:
    - ./volumes/nomadpi-butterfly-ai:/usr/src/app
    restart: unless-stopped
    environment:
      DEBUG: 1
      PORT: "3005"
      SERVICES_API_ROOT_URL: "http://127.0.0.1:3002"

  influxdb:
    container_name: influxdb
    image: "influxdb:1.8"
    restart: unless-stopped
    ports:
    - "8086:8086"
    environment:
    - TZ=Etc/UTC
    - INFLUXDB_DB=defaultdb
    - INFLUXDB_HTTP_FLUX_ENABLED=true
    - INFLUXDB_REPORTING_DISABLED=false
    - INFLUXDB_HTTP_AUTH_ENABLED=false
    - INFLUXDB_MONITOR_STORE_ENABLED=FALSE
  # - INFLUX_USERNAME=dba
  # - INFLUX_PASSWORD=supremo
  # - INFLUXDB_UDP_ENABLED=false
  # - INFLUXDB_UDP_BIND_ADDRESS=0.0.0.0:8086
  # - INFLUXDB_UDP_DATABASE=udp
    volumes:
    - ./volumes/influxdb/data:/var/lib/influxdb
    - ./backups/influxdb/db:/var/lib/influxdb/backup
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8086"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  nomadpi-open-wake-word:
    container_name: nomadpi-open-wake-word
    network_mode: host
    build:
      context: ./services/nomadpi-open-wake-word
    volumes:
    - ./volumes/nomadpi-open-wake-word:/app
    command: sh -c "python3 streaming_server.py --model_path=./ok_nomadpi.onnx --inference_framework=onnx"
    ports:
    - "9002:9002"
    restart: unless-stopped

  frigate:
    container_name: frigate
    privileged: true
    restart: unless-stopped
    image: ghcr.io/blakeblackshear/frigate:stable
    shm_size: "128mb"
      # devices:
        # - /dev/bus/usb:/dev/bus/usb # passes the USB Coral, needs to be modified for other versions
        # - /dev/apex_0:/dev/apex_0 # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
        # - /dev/dri/renderD128 # for intel hwaccel, needs to be updated for your hardware
    volumes:
      - /dev/bus/usb:/dev/bus/usb
      - /etc/localtime:/etc/localtime:ro
      - ./volumes/frigate/config:/config
      - ./volumes/frigate/storage:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      - "5000:5000"
      - "8554:8554" # RTSP feeds
      - "8555:8555/tcp" # WebRTC over tcp
      - "8555:8555/udp" # WebRTC over udp
    environment:
      FRIGATE_RTSP_PASSWORD: "password"

  cloudflare-tunnel:
    container_name: cloudflared-tunnel
    build:
      context: ./services/cloudflared
    restart: unless-stopped
    network_mode: "host"
    secrets:
    - cloudflare_tunnel_token

  nextcloud-client:
    container_name: nextcloud-client
    build:
      context: services/nextcloud-client
    environment:
      NC_SOURCE_DIR: '/media/nextcloud/'
      NC_PATH: ''
      NC_SILENT: 'false'
      NC_INTERVAL: 300
      NC_EXIT: 'false'
      USER: 'ncsync'
      USER_GID: 1000
      USER_UID: 1000
      NC_TRUST_CERT: 'false'
      NC_HIDDEN: 'false'
    volumes:
    - ./volumes/mariadb:/media/nextcloud/mariadb
    - ./volumes/influxdb:/media/nextcloud/influxdb
    - ./volumes/frigate:/media/nextcloud/frigate
    secrets:
    - nextcloud_host
    - nextcloud_username
    - nextcloud_password

  nomadpi-bluetooth-api:
    container_name: nomadpi-bluetooth-api
    privileged: true
    build:
      context: ./services/nomadpi-bluetooth-api
    restart: unless-stopped
    volumes:
    - ./volumes/nomadpi-bluetooth-api:/app
    - /run/dbus:/run/dbus:ro
    ports:
    - "5007:5007"
    command: sh -c "python3 server.py"
    # command: sh -c "python3 -m flask --app server run --host=0.0.0.0 --port=5007"
    # environment:
    #   BLEAK_LOGGING: 1

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    environment:
      TZ: ${TZ:-Etc/UTC}
      ZIGBEE2MQTT_CONFIG_MQTT_SERVER: mqtt://mosquitto:1883
      ZIGBEE2MQTT_CONFIG_FRONTEND: "true"
      ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_SYMLINK_CURRENT: "true"
      ZIGBEE2MQTT_CONFIG_SERIAL_PORT: /dev/${ZIGBEE_UDEV_KEY}
      ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER: deconz
    ports:
    - "8080:8080"
    volumes:
    - ./volumes/zigbee2mqtt/data:/app/data
    devices:
    - /dev/${ZIGBEE_UDEV_KEY}:/dev/${ZIGBEE_UDEV_KEY}
    restart: unless-stopped
    depends_on:
    - mosquitto

secrets:
  cloudflare_tunnel_token:
    file: ./volumes/secrets/cloudflare/tunnel_token
  nextcloud_host:
    file: ./volumes/secrets/nextcloud/nextcloud_host
  nextcloud_username:
    file: ./volumes/secrets/nextcloud/nextcloud_username
  nextcloud_password:
    file: ./volumes/secrets/nextcloud/nextcloud_password
